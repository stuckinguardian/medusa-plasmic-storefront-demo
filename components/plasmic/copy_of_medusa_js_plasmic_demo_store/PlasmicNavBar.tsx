// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mWsxNu6bNJUjXxTj6j5WLx
// Component: if0HoxvimUSz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: Ddzk5l-7sQtW/component
import TextInput from "../../TextInput"; // plasmic-import: 4mdOcJ3pjiMV/component
import { CartProvider } from "../../medusa/CartProvider"; // plasmic-import: t5iYwTjkrz3s/codeComponent
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mWsxNu6bNJUjXxTj6j5WLx/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: if0HoxvimUSz/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: tLfoPFexMQ-Z/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: Zm0g-6LzhfNj/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: y72g0QgPvQNx/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: iWwGQthfZWwt/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: V5GtS72K66PW/icon
import CartIcon from "./icons/PlasmicIcon__Cart"; // plasmic-import: 2-qXqg8wSEit/icon

createPlasmicElementProxy;

export type PlasmicNavBar__VariantMembers = {
  filled: "filled";
  searchOpen: "searchOpen";
};
export type PlasmicNavBar__VariantsArgs = {
  filled?: SingleBooleanChoiceArg<"filled">;
  searchOpen?: SingleBooleanChoiceArg<"searchOpen">;
};
type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>(
  "filled",
  "searchOpen"
);

export type PlasmicNavBar__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar__OverridesType = {
  root?: Flex__<"section">;
  homeButton?: Flex__<typeof Button>;
  img?: Flex__<typeof PlasmicImg__>;
  searchButton?: Flex__<typeof Button>;
  searchInput?: Flex__<typeof TextInput>;
  profileButton?: Flex__<typeof Button>;
  signIn?: Flex__<typeof Button>;
  signOut?: Flex__<typeof Button>;
  cartProvider?: Flex__<typeof CartProvider>;
  cartButton?: Flex__<typeof Button>;
  text?: Flex__<"div">;
};

export interface DefaultNavBarProps {
  filled?: SingleBooleanChoiceArg<"filled">;
  searchOpen?: SingleBooleanChoiceArg<"searchOpen">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "filled",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.filled
      },
      {
        path: "searchOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.searchOpen
      },
      {
        path: "searchInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        { [sty.rootsearchOpen]: hasVariant($state, "searchOpen", "searchOpen") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__hXhqw, {
          [sty.freeBoxfilled__hXhqWuxJx3]: hasVariant(
            $state,
            "filled",
            "filled"
          ),
          [sty.freeBoxsearchOpen__hXhqWb6V1V]: hasVariant(
            $state,
            "searchOpen",
            "searchOpen"
          )
        })}
      >
        <Button
          data-plasmic-name={"homeButton"}
          data-plasmic-override={overrides.homeButton}
          className={classNames("__wab_instance", sty.homeButton)}
          link={`/`}
          startIcon={null}
          submitsForm={true}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"70px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"202px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/copy_of_medusa_js_plasmic_demo_store/images/image.png",
              fullWidth: 1920,
              fullHeight: 1482,
              aspectRatio: undefined
            }}
          />
        </Button>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___8X4Cj, {
            [sty.freeBoxsearchOpen___8X4CJb6V1V]: hasVariant(
              $state,
              "searchOpen",
              "searchOpen"
            )
          })}
        >
          {(hasVariant($state, "searchOpen", "searchOpen") ? false : true) ? (
            <Button
              data-plasmic-name={"searchButton"}
              data-plasmic-override={overrides.searchButton}
              className={classNames("__wab_instance", {
                [sty.searchButtonsearchOpen]: hasVariant(
                  $state,
                  "searchOpen",
                  "searchOpen"
                )
              })}
              iconOnly={true}
              link={`/category`}
              startIcon={
                <SearchIcon
                  className={classNames(projectcss.all, sty.svg__pk7V7)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              {"Menu"}
            </Button>
          ) : null}
          <TextInput
            data-plasmic-name={"searchInput"}
            data-plasmic-override={overrides.searchInput}
            className={classNames("__wab_instance", sty.searchInput, {
              [sty.searchInputsearchOpen]: hasVariant(
                $state,
                "searchOpen",
                "searchOpen"
              )
            })}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["searchInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"Search..."}
            value={
              generateStateValueProp($state, ["searchInput", "value"]) ?? ""
            }
          />

          {false ? (
            <Button
              data-plasmic-name={"profileButton"}
              data-plasmic-override={overrides.profileButton}
              iconOnly={true}
              startIcon={
                <ProfileIcon
                  className={classNames(projectcss.all, sty.svg__ncIO)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              {"Menu"}
            </Button>
          ) : null}
          {(() => {
            try {
              return !$ctx.customer;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              data-plasmic-name={"signIn"}
              data-plasmic-override={overrides.signIn}
              className={classNames("__wab_instance", sty.signIn)}
              colors={"black"}
              link={`/login`}
            >
              {"Sign in"}
            </Button>
          ) : null}
          {(() => {
            try {
              return !!$ctx.customer;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              data-plasmic-name={"signOut"}
              data-plasmic-override={overrides.signOut}
              className={classNames("__wab_instance", sty.signOut)}
              colors={"black"}
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = true
                  ? (() => {
                      const actionArgs = { args: [] };
                      return $globalActions["medusa-provider.signOut"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["goToLogin"] = true
                  ? (() => {
                      const actionArgs = { destination: `/login` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToLogin"] != null &&
                  typeof $steps["goToLogin"] === "object" &&
                  typeof $steps["goToLogin"].then === "function"
                ) {
                  $steps["goToLogin"] = await $steps["goToLogin"];
                }
              }}
            >
              {"Sign out"}
            </Button>
          ) : null}
          <div className={classNames(projectcss.all, sty.freeBox__thztb)}>
            <CartProvider
              data-plasmic-name={"cartProvider"}
              data-plasmic-override={overrides.cartProvider}
              className={classNames("__wab_instance", sty.cartProvider)}
            >
              <DataCtxReader__>
                {$ctx => (
                  <Button
                    data-plasmic-name={"cartButton"}
                    data-plasmic-override={overrides.cartButton}
                    colors={"white"}
                    link={`/cart`}
                    rounded={true}
                    showStartIcon={true}
                    startIcon={
                      <CartIcon
                        className={classNames(projectcss.all, sty.svg__pI9N9)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text,
                        {
                          [sty.textfilled]: hasVariant(
                            $state,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                    >
                      {hasVariant($state, "filled", "filled") ? (
                        "1"
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $ctx.cart?.items?.length ?? 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "0";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </Button>
                )}
              </DataCtxReader__>
            </CartProvider>
          </div>
        </Stack__>
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "homeButton",
    "img",
    "searchButton",
    "searchInput",
    "profileButton",
    "signIn",
    "signOut",
    "cartProvider",
    "cartButton",
    "text"
  ],
  homeButton: ["homeButton", "img"],
  img: ["img"],
  searchButton: ["searchButton"],
  searchInput: ["searchInput"],
  profileButton: ["profileButton"],
  signIn: ["signIn"],
  signOut: ["signOut"],
  cartProvider: ["cartProvider", "cartButton", "text"],
  cartButton: ["cartButton", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  homeButton: typeof Button;
  img: typeof PlasmicImg__;
  searchButton: typeof Button;
  searchInput: typeof TextInput;
  profileButton: typeof Button;
  signIn: typeof Button;
  signOut: typeof Button;
  cartProvider: typeof CartProvider;
  cartButton: typeof Button;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavBar__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeButton: makeNodeComponent("homeButton"),
    img: makeNodeComponent("img"),
    searchButton: makeNodeComponent("searchButton"),
    searchInput: makeNodeComponent("searchInput"),
    profileButton: makeNodeComponent("profileButton"),
    signIn: makeNodeComponent("signIn"),
    signOut: makeNodeComponent("signOut"),
    cartProvider: makeNodeComponent("cartProvider"),
    cartButton: makeNodeComponent("cartButton"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
