// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mWsxNu6bNJUjXxTj6j5WLx
// Component: Ki91TWZpf3yw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { CategoryCollection } from "../../medusa/CategoryCollection"; // plasmic-import: uZHeQVbCyYCN/codeComponent
import Button from "../../Button"; // plasmic-import: Ddzk5l-7sQtW/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: mWsxNu6bNJUjXxTj6j5WLx/projectcss
import sty from "./PlasmicValue.module.css"; // plasmic-import: Ki91TWZpf3yw/css

import TakeOffIcon from "./icons/PlasmicIcon__TakeOff"; // plasmic-import: FEQbhIzTzqm1/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: tLfoPFexMQ-Z/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: B4VxWye7m5xk/icon

createPlasmicElementProxy;

export type PlasmicValue__VariantMembers = {
  topBottom: "topBottom";
  center: "center";
  withButton: "withButton";
};
export type PlasmicValue__VariantsArgs = {
  topBottom?: SingleBooleanChoiceArg<"topBottom">;
  center?: SingleBooleanChoiceArg<"center">;
  withButton?: SingleBooleanChoiceArg<"withButton">;
};
type VariantPropType = keyof PlasmicValue__VariantsArgs;
export const PlasmicValue__VariantProps = new Array<VariantPropType>(
  "topBottom",
  "center",
  "withButton"
);

export type PlasmicValue__ArgsType = {
  children?: React.ReactNode;
  icon?: React.ReactNode;
  children2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicValue__ArgsType;
export const PlasmicValue__ArgProps = new Array<ArgPropType>(
  "children",
  "icon",
  "children2"
);

export type PlasmicValue__OverridesType = {
  root?: Flex__<"div">;
  categoryCollection?: Flex__<typeof CategoryCollection>;
};

export interface DefaultValueProps {
  children?: React.ReactNode;
  icon?: React.ReactNode;
  children2?: React.ReactNode;
  topBottom?: SingleBooleanChoiceArg<"topBottom">;
  center?: SingleBooleanChoiceArg<"center">;
  withButton?: SingleBooleanChoiceArg<"withButton">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicValue__RenderFunc(props: {
  variants: PlasmicValue__VariantsArgs;
  args: PlasmicValue__ArgsType;
  overrides: PlasmicValue__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "topBottom",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.topBottom
      },
      {
        path: "center",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.center
      },
      {
        path: "withButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withButton
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootcenter]: hasVariant($state, "center", "center"),
          [sty.roottopBottom]: hasVariant($state, "topBottom", "topBottom"),
          [sty.rootwithButton]: hasVariant($state, "withButton", "withButton")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__qilCh, {
          [sty.freeBoxcenter__qilChFQj4]: hasVariant(
            $state,
            "center",
            "center"
          ),
          [sty.freeBoxtopBottom__qilChaWWzI]: hasVariant(
            $state,
            "topBottom",
            "topBottom"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___18Hvm)}>
          {renderPlasmicSlot({
            defaultContents: (
              <TakeOffIcon
                className={classNames(projectcss.all, sty.svg__rW7EZ)}
                role={"img"}
              />
            ),

            value: args.icon
          })}
        </div>
      </div>
      <CategoryCollection
        data-plasmic-name={"categoryCollection"}
        data-plasmic-override={overrides.categoryCollection}
        children={null}
        className={classNames("__wab_instance", sty.categoryCollection, {
          [sty.categoryCollectionwithButton]: hasVariant(
            $state,
            "withButton",
            "withButton"
          )
        })}
        emptyMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wTgov
                )}
              >
                {"No product found!"}
              </div>
            )}
          </DataCtxReader__>
        }
        loadingMessage={
          <DataCtxReader__>
            {$ctx => (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wa6Gf
                )}
              >
                {"Loading..."}
              </div>
            )}
          </DataCtxReader__>
        }
      />

      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__dxStD, {
          [sty.freeBoxcenter__dxStDfQj4]: hasVariant(
            $state,
            "center",
            "center"
          ),
          [sty.freeBoxwithButton__dxStDbrWfi]: hasVariant(
            $state,
            "withButton",
            "withButton"
          )
        })}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wCsh
                )}
              >
                {"Worldwide Shipping"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sUdz7
                )}
              >
                {"Special financing and earn rewards."}
              </div>
            </React.Fragment>
          ),
          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencenter]: hasVariant(
              $state,
              "center",
              "center"
            )
          })
        })}
      </Stack__>
      {(hasVariant($state, "withButton", "withButton") ? true : false) ? (
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__aQGia, {
            [sty.freeBoxcenter__aQGiaFQj4]: hasVariant(
              $state,
              "center",
              "center"
            ),
            [sty.freeBoxwithButton__aQGiabrWfi]: hasVariant(
              $state,
              "withButton",
              "withButton"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button___8EpI, {
                  [sty.buttonwithButton___8EpIbrWfi]: hasVariant(
                    $state,
                    "withButton",
                    "withButton"
                  )
                })}
                colors={"black"}
                endIcon={
                  <RightArrowIcon
                    className={classNames(projectcss.all, sty.svg__b7Hgr)}
                    role={"img"}
                  />
                }
                rounded={true}
                size={"large"}
                submitsForm={true}
              >
                {"Read our letter"}
              </Button>
            ),
            value: args.children2,
            className: classNames(sty.slotTargetChildren2, {
              [sty.slotTargetChildren2center]: hasVariant(
                $state,
                "center",
                "center"
              ),
              [sty.slotTargetChildren2withButton]: hasVariant(
                $state,
                "withButton",
                "withButton"
              )
            })
          })}
        </Stack__>
      ) : null}
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "categoryCollection"],
  categoryCollection: ["categoryCollection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  categoryCollection: typeof CategoryCollection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValue__VariantsArgs;
    args?: PlasmicValue__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValue__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValue__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicValue__ArgProps,
          internalVariantPropNames: PlasmicValue__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValue";
  } else {
    func.displayName = `PlasmicValue.${nodeName}`;
  }
  return func;
}

export const PlasmicValue = Object.assign(
  // Top-level PlasmicValue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    categoryCollection: makeNodeComponent("categoryCollection"),

    // Metadata about props expected for PlasmicValue
    internalVariantProps: PlasmicValue__VariantProps,
    internalArgProps: PlasmicValue__ArgProps
  }
);

export default PlasmicValue;
/* prettier-ignore-end */
